type User {
  id: ID! @id
  username: String! @unique
  email: String! @unique
  firstName: String! @default(value:"")
  lastName: String!
  bio : String!
  followers: [User!]! @relation(name: "FollowRelation")
  following: [User!]! @relation(name: "FollowRelation")
  posts: [Post!]! @relation(name: "PostsOfUser", onDelete: CASCADE)
  likes: [Like!]! @relation(name: "LikesOfUser", onDelete: CASCADE)
  comments: [Comment!]! @relation(name: "CommentsOfUser", onDelete: CASCADE)
  rooms : [Room!]! @relation(name : "RoomsOfUser", onDelete: CASCADE)
  loginSecret: String
}

type Post{
  id: ID! @id
  location: String
  caption: String!
  user: User @relation(name: "PostsOfUser")
  files: [File!]! @relation(name: "FilesOfPost", onDelete: CASCADE)
  likes: [Like!]! @relation(name: "LikeOfPost", onDelete: CASCADE)
  comments: [Comment!]! @relation(name: "CommentOfPost", onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Like{
  id: ID! @id
  user: User @relation(name: "LikesOfUser")
  post: Post @relation(name: "LikeOfPost")
}

type Comment{
  id: ID! @id
  text : String!
  user: User @relation(name: "CommentsOfUser")
  post: Post @relation(name: "CommentOfPost")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type File{
  id: ID! @id
  url : String!
  post: Post @relation(name: "FilesOfPost")
}

type Room{
  id: ID! @id
  participants : [User!]! @relation(name : "UserOfRoom", onDelete: CASCADE)
  messages : [Message!]! @relation(name : "MessagesOfRoom", onDelete: CASCADE)
}

type Message{
  id : ID! @id
  text : String!
  from: User! @relation(name : "UserOfTo", onDelete: CASCADE)
  to: User! @relation(name : "UserOfFrom", onDelete: CASCADE)
  room : Room! @relation(name : "RoomOfRoom", onDelete: CASCADE)
}
